<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>test</artifactId>
        <groupId>org.cz</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>zk-gui</artifactId>
    <packaging>jar</packaging>

    <properties>
        <!-- 文件拷贝时的编码 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- 编译时的编码 -->
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>jtoaster</groupId>
            <artifactId>jtoaster</artifactId>
            <version>1.0.4</version>
            <!--<scope>system</scope>-->
            <!--<systemPath>${basedir}/src/main/lib/jtoaster-1.0.4.jar</systemPath>-->
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.15</version>
            <!--<scope>system</scope>-->
            <!--<systemPath>${basedir}/src/main/lib/log4j-1.2.15.jar</systemPath>-->
        </dependency>
        <dependency>
            <groupId>table-layout</groupId>
            <artifactId>table-layout</artifactId>
            <version>20050920</version>
            <!--<scope>system</scope>-->
            <!--<systemPath>${basedir}/src/main/lib/TableLayout-20050920.jar</systemPath>-->
        </dependency>
        <dependency>
            <groupId>zookeeper</groupId>
            <artifactId>zookeeper</artifactId>
            <version>3.3.0</version>
            <!--<scope>system</scope>-->
            <!--<systemPath>${basedir}/src/main/lib/zookeeper-3.3.0.jar</systemPath>-->
        </dependency>
    </dependencies>
    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <!--<includes>-->
                    <!--<include>*.txt</include>-->
                <!--</includes>-->
<!--                <excludes>
                    <exclude>config/*</exclude>
                    <exclude>icons/*</exclude>
                </excludes>-->
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <!--没有效果-->
                    <!--<compilerArguments>-->
                        <!--<extdirs>${basedir}\src\main\lib</extdirs>-->
                    <!--</compilerArguments>-->
                </configuration>
            </plugin>
            <!--如果使用<scope>为system的dependency在ide环境下可以运行，但是打包后不会打进去，因为默认认为system的包是系统已经提供了，所以maven不会再打包，所以想达到打包的效果最好先将包安装到仓库中去，这里采用的方式是安装到本地仓库，然后流程和正常依赖一样-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>2.5.2</version>
                <executions>
                    <execution>
                        <id>install-zookeeper</id>
                        <phase>clean</phase>
                        <configuration>
                            <file>${basedir}/src/main/lib/zookeeper-3.3.0.jar</file>
                            <repositoryLayout>default</repositoryLayout>
                            <groupId>zookeeper</groupId>
                            <artifactId>zookeeper</artifactId>
                            <version>3.3.0</version>
                            <packaging>jar</packaging>
                            <generatePom>true</generatePom>
                        </configuration>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>install-table-layout</id>
                        <phase>clean</phase>
                        <configuration>
                            <file>${basedir}/src/main/lib/TableLayout-20050920.jar</file>
                            <repositoryLayout>default</repositoryLayout>
                            <groupId>table-layout</groupId>
                            <artifactId>table-layout</artifactId>
                            <version>20050920</version>
                            <packaging>jar</packaging>
                            <generatePom>true</generatePom>
                        </configuration>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>install-log4j</id>
                        <phase>clean</phase>
                        <configuration>
                            <file>${basedir}/src/main/lib/log4j-1.2.15.jar</file>
                            <repositoryLayout>default</repositoryLayout>
                            <groupId>log4j</groupId>
                            <artifactId>log4j</artifactId>
                            <version>1.2.15</version>
                            <packaging>jar</packaging>
                            <generatePom>true</generatePom>
                        </configuration>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>install-jtoaster</id>
                        <phase>clean</phase>
                        <configuration>
                            <file>${basedir}/src/main/lib/jtoaster-1.0.4.jar</file>
                            <repositoryLayout>default</repositoryLayout>
                            <groupId>jtoaster</groupId>
                            <artifactId>jtoaster</artifactId>
                            <version>1.0.4</version>
                            <packaging>jar</packaging>
                            <generatePom>true</generatePom>
                        </configuration>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--功能同上，但是是安装到远程仓库-->
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-deploy-plugin</artifactId>-->
                <!--<version>2.8.2</version>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<id>deploy-file</id>-->
                        <!--<phase>clean</phase>-->
                        <!--<goals>-->
                            <!--<goal>deploy-file</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--&lt;!&ndash; 开发阶段上传到snapshot仓库，上线阶段上传到release仓库 &ndash;&gt;-->
                            <!--<repositoryId>thirdparty</repositoryId>-->
                            <!--<url>http://maven.hikvision.com.cn/nexus/content/repositories/thirdparty/</url>-->
                            <!--<file>${basedir}/src/main/lib/casclient-1.4.jar</file>-->
                            <!--<groupId>third.fujian</groupId>-->
                            <!--<artifactId>casclient</artifactId>-->
                            <!--<version>1.4</version>-->
                            <!--&lt;!&ndash;<classifier>interface</classifier>&ndash;&gt;-->
                        <!--</configuration>-->
                    <!--</execution>-->
                <!--</executions>-->
            <!--</plugin>-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <!-- The configuration of the plugin -->
                <configuration>
                    <!-- Configuration of the archiver -->
                    <archive>

                        <!--
                            生成的jar中，不要包含pom.xml和pom.properties这两个文件
                        -->
                        <addMavenDescriptor>false</addMavenDescriptor>

                        <!-- Manifest specific configuration -->
                        <manifest>
                            <!--
                                是否要把第三方jar放到manifest的classpath中
                            -->
                            <addClasspath>true</addClasspath>
                            <!--
                               生成的manifest中classpath的前缀，因为要把第三方jar放到lib目录下，所以classpath的前缀是lib/
                           -->
                            <classpathPrefix>lib/</classpathPrefix>
                            <!--
                                应用的main class
                            -->
                            <mainClass>org.cz.inspector.ZooInspector</mainClass>
                        </manifest>
                        <manifestEntries>
                            <Class-Path>.</Class-Path>
                        </manifestEntries>
                    </archive>
                    <!--
                        过滤掉不希望包含在jar中的文件
                    -->
                    <!--<excludes>-->
                    <!--<exclude>${project.basedir}/xml/*</exclude>-->
                    <!--</excludes>-->
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <!--<appendAssemblyId>false</appendAssemblyId>-->
                    <!--<descriptorRefs>-->
                        <!--<descriptorRef>jar-with-dependencies</descriptorRef>-->
                    <!--</descriptorRefs>-->
                    <!--<archive>-->
                        <!--<manifest>-->
                            <!--<mainClass>org.cz.inspector.ZooInspector</mainClass>-->
                        <!--</manifest>-->
                    <!--</archive>-->
                    <descriptors>
                        <descriptor>src/main/assembly/assembly.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--
        此plugin可以用
        利用此plugin，把源代码中的xml文件，打包到相应位置，
        这里主要是为了打包Mybatis的mapper.xml文件
        -->
<!--            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.5</version>
                <executions>
                    <execution>
                        <id>copy-xmls</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/classes</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/src/main/java</directory>
                                    <includes>
                                        <include>**/*.xml</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>-->
        </plugins>
    </build>
</project>